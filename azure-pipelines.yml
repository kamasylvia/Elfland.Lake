# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
      - main
      - master
      - dev

variables:
  - group: git-global-configs
  - group: tokens

resources:
- repo: self

pool:
  vmImage: windows-latest

steps:
  # Allow scripts to access the system token
  - checkout: self
    persistCredentials: true
  - task: DotNetCoreCLI@2
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'install -g csharpier'
    displayName: "Install CSharpier."
  - task: DotNetCoreCLI@2
    inputs:
      command: 'custom'
      custom: 'csharpier'
      arguments: '.'
    displayName: "Format the source code with CShpier."
  - task: CmdLine@2
    continueOnError: true
    inputs:
      script: |
        git config --global user.email "$(EMAIL)"
        git config --global user.name "$(USERNAME)"
    displayName: "Set global git configs."
  - task: CmdLine@2
    continueOnError: true
    inputs:
      script: |
        git checkout $(Build.SourceBranchName)
        git add -A
        git commit --allow-empty -m "Format source code with CSharpier [skip ci]"
        git push
    displayName: "Push formatted code back to the remote repository."
  - task: DotNetCoreCLI@2
    inputs:
      command: 'pack'
      packagesToPack: '**/*.csproj'
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'BUILD_BUILDNUMBER'
    displayName: "Package"
  - task: NuGetCommand@2
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      nuGetFeedType: 'external'
      publishFeedCredentials: 'NuGet.org'
    displayName: "Push to NuGet.org"
